name: Docker

on: [push]

jobs:
  build-backend:
    name: Build (Backend)
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
          token: ${{ secrets.GH_TOKEN }}
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master
        with:
          install: true
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-multi-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-multi-buildx
      - name: Docker Login
        uses: docker/login-action@v1.14.1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}
      - name: Build production image
        uses: docker/build-push-action@v2
        with:
          context: backend
          builder: ${{ steps.buildx.outputs.name }}
          file: backend/Dockerfile
          push: ${{ github.event_name != 'pull_request' && github.ref == 'refs/heads/main' }}
          tags: |
            ghcr.io/csesoc/chaos-backend:${{ github.sha }}
            ghcr.io/csesoc/chaos-backend:latest
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          # Note the mode=max here
          # More: https://github.com/moby/buildkit#--export-cache-options
          # And: https://github.com/docker/buildx#--cache-tonametypetypekeyvalue
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
  build-client:
    name: Build (Client)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: frontend
          push: ${{ github.event_name != 'pull_request' && github.ref == 'refs/heads/main' }}
          platforms: linux/amd64
          file: frontend/Dockerfile
          build-args: |
            REACT_APP_API_BASE_URL=${{ secrets.REACT_APP_API_BASE_URL }}
            REACT_APP_OAUTH_CALLBACK_URL=${{ secrets.REACT_APP_OAUTH_CALLBACK_URL }}
          tags: |
            ghcr.io/csesoc/chaos-frontend:${{ github.sha }}
            ghcr.io/csesoc/chaos-frontend:latest
          labels: ${{ steps.meta.outputs.labels }}
  deploy:
    name: Deploy (CD)
    runs-on: ubuntu-latest
    needs: [build-client, build-backend]
    if: ${{ github.event_name != 'pull_request' && github.ref == 'refs/heads/main' }}
    concurrency: staging
    environment:
      name: staging
      url: https://chaos.staging.csesoc.unsw.edu.au
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          repository: csesoc/deployment
          token: ${{ secrets.GH_TOKEN }}
      - name: Install yq - portable yaml processor
        uses: mikefarah/yq@v4.25.1
      - name: Update deployment
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          git config user.name "CSESoc CD"
          git config user.email "technical@csesoc.org.au"
          git checkout -b update/chaos/staging/${{ github.sha }}
          yq -i '.items[0].spec.template.spec.containers[0].image = "ghcr.io/csesoc/chaos-frontend:${{ github.sha }}"' apps/projects/chaos/staging/deploy-frontend.yml
          yq -i '.items[0].spec.template.spec.containers[0].image = "ghcr.io/csesoc/chaos-backend:${{ github.sha }}"' apps/projects/chaos/staging/deploy-backend.yml
          git add . 
          git commit -m "feat(chaos/staging): update images" 
          git push -u origin update/chaos/staging/${{ github.sha }}
          gh pr create --title "feat(chaos/staging): update images" --body "Updates the images for the chaos staging deployment to commit csesoc/chaos@${{ github.sha }}." > URL
          gh pr merge $(cat URL) --squash -d
